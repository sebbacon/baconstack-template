# Development
install:
    uv venv --python 3.11
    source .venv/bin/activate
    just requirements
    uv pip install -e ".[dev]"
    
requirements:
    #!/usr/bin/env bash
    # Generate requirements.txt from pyproject.toml
    uv pip compile pyproject.toml -o requirements.txt
    # Generate requirements-dev.txt from pyproject.toml including dev dependencies
    uv pip compile pyproject.toml --all-extras -o requirements-dev.txt

dev:
    {%- if framework == "fastapi" %}
    uvicorn src.main:app --reload
    {%- else %}
    flask --app src.app run --debug -p 8001
    {%- endif %}

# Testing and linting
test:
    pytest

lint:
    ruff check .
    ruff format --check .

format:
    ruff check --fix .
    ruff format .

# Version management
version:
    #!/usr/bin/env bash
    # Get the current version from pyproject.toml
    current_version=$(grep -m1 "version = " pyproject.toml | cut -d'"' -f2)
    echo "Current version: ${current_version}"

bump part="patch":
    #!/usr/bin/env bash
    # Get the current version from pyproject.toml
    current_version=$(grep -m1 "version = " pyproject.toml | cut -d'"' -f2)
    # Calculate new version using standard-version
    new_version=$(standard-version --dry-run --skip.commit --skip.tag --release-as {{part}} | grep "tagging" | cut -d' ' -f4)
    # Update pyproject.toml
    sed -i "s/version = \"${current_version}\"/version = \"${new_version}\"/" pyproject.toml
    # Create git tag
    git add pyproject.toml
    git commit -m "chore: bump version to ${new_version}"
    git tag -a "v${new_version}" -m "version ${new_version}"
    echo "Bumped version to ${new_version}"
    echo "Run 'git push && git push --tags' to publish"

# For template repository only
template-version:
    #!/usr/bin/env bash
    # Get the current version from copier.yml
    current_version=$(grep -m1 "_version: " copier.yml | cut -d'"' -f2)
    echo "Current template version: ${current_version}"

template-bump part="patch":
    #!/usr/bin/env bash
    # Get the current version from copier.yml
    current_version=$(grep -m1 "_version: " copier.yml | cut -d'"' -f2)
    # Calculate new version using standard-version
    new_version=$(standard-version --dry-run --skip.commit --skip.tag --release-as {{part}} | grep "tagging" | cut -d' ' -f4)
    # Update copier.yml
    sed -i "s/_version: \"${current_version}\"/_version: \"${new_version}\"/" copier.yml
    # Create git tag
    git add copier.yml
    git commit -m "chore: bump template version to ${new_version}"
    git tag -a "v${new_version}" -m "template version ${new_version}"
    echo "Bumped template version to ${new_version}"
    echo "Run 'git push && git push --tags' to publish"

# Deployment
deploy:
    git push dokku main

logs:
    ssh {{dokku_host}} dokku logs {{project_name}} -t

setup-remote:
    webstack setup {{project_name}} {{domain}}

setup-loki:
    webstack setup-loki {{project_name}}

# Database
migrate:
    {%- if framework == "django" %}
    python manage.py migrate
    {%- else %}
    alembic upgrade head
    {%- endif %}

makemigrations:
    {%- if framework == "django" %}
    python manage.py makemigrations
    {%- else %}
    alembic revision --autogenerate -m "{{migration_message}}"
    {%- endif %}
