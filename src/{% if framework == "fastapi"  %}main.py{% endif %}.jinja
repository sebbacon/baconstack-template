# templates/fastapi/src/main.py
from datetime import datetime
from fastapi import FastAPI, Response, status
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import sqlite3
import os
from .config import settings
from .utils.db import get_database_path

start_time = datetime.now()

class HealthCheck(BaseModel):
    status: str
    version: str
    timestamp: str
    database: str
    uptime_seconds: float

app = FastAPI(title="{{ project_name }}")


def check_database():
    """Check database connectivity"""
    try:
        db_path = get_database_path()
        conn = sqlite3.connect(db_path)
        try:
            conn.execute("SELECT 1")
            return "healthy"
        finally:
            conn.close()
    except Exception as e:
        return f"unhealthy: {str(e)}"


@app.get("/health", response_model=HealthCheck)
async def health_check(response: Response):
    """Health check endpoint"""
    is_healthy = True
    db_status = check_database()

    if db_status != "healthy":
        is_healthy = False
        response.status_code = status.HTTP_503_SERVICE_UNAVAILABLE

    return HealthCheck(
        status="healthy" if is_healthy else "unhealthy",
        version=os.getenv("APP_VERSION", "0.1.0"),
        timestamp=datetime.now().isoformat(),
        database=db_status,
        uptime_seconds=(datetime.now() - start_time).total_seconds(),
    )


@app.get("/")
async def root():
    return {"message": "Welcome to {{ project_name }}"}
